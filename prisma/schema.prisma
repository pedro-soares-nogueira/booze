generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id        String   @id @default(uuid())
  name      String
  imageUrl  String
  price     Int
  createdAt DateTime @default(now())

  category        Category          @relation(fields: [categoryId], references: [id])
  categoryId      String
  ProductsOnOrder ProductsOnOrder[]

  @@map("products")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  products  Product[]

  @@map("categories")
}

model Order {
  id              String            @id @default(uuid())
  code            Int               @unique
  userId          String
  payment_mode    String
  price_amount    Int
  orderStatusId   String
  adressId        String?
  createdAt       DateTime          @default(now())
  ProductsOnOrder ProductsOnOrder[]
  user            User              @relation(fields: [userId], references: [id])
  orderStatus     OrderStatus       @relation(fields: [orderStatusId], references: [id])
  Adress          Adress?           @relation(fields: [adressId], references: [id])

  @@map("orders")
}

model ProductsOnOrder {
  productId String
  product   Product @relation(fields: [productId], references: [id])
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  quantify  Int

  @@id([orderId, productId])
}

model OrderStatus {
  id    String  @id @default(uuid())
  title String  @unique
  Order Order[]

  @@map("status")
}

model Adress {
  id          String  @id @default(uuid())
  userId      String?
  cep         String
  rua         String
  numero      String
  bairro      String
  complemento String
  orders      Order[]
  User        User?   @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  Order         Order[]
  adress        Adress[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
